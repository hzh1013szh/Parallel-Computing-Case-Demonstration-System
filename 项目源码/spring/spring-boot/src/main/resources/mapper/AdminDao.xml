<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hwk.springboot.dao.AdminDao">
    <select id="getUser" resultType="com.hwk.springboot.entity.Admin">
        select * from admin_m
    </select>
    <select id="getBySearch" resultType="com.hwk.springboot.entity.Admin">
        select * from admin_m
        <where>
            role != 'admin'
            <if test="params != null and params.name != null and params.name != ''">
                and name like concat('%',#{params.name},'%')
            </if>
            <if test="params != null and params.username != null and params.username != ''">
                and username like concat('%',#{params.username},'%')
            </if>
            and status = '1'
        </where>
        order by id asc
    </select>
    <insert id="addAdmin" parameterType="com.hwk.springboot.entity.Admin">
        insert into admin_m(username,password,phone,name,email,role,specialty,status,myfan,myfollow,avatar)values
        (#{admin.username},#{admin.password},#{admin.phone},#{admin.name},#{admin.email},#{admin.role},#{admin.specialty},#{admin.status},#{admin.myfan},#{admin.myfollow},#{admin.avatar})
    </insert>
    <update id="updateAdmin" parameterType="com.hwk.springboot.entity.Admin">
        update admin_m set id = #{admin.id},username=#{admin.username},password=#{admin.password},phone=#{admin.phone},
                           name=#{admin.name},email=#{admin.email},role=#{admin.role},specialty=#{admin.specialty},
                           status=#{admin.status},myfan=#{admin.myfan},myfollow=#{admin.myfollow},avatar=#{admin.avatar}
        where id = #{admin.id}
    </update>
    <delete id="deleteAdmin" parameterType="java.lang.Integer">
        delete from admin_m where id = #{id}
    </delete>
    <select id="getBySearchUsername" parameterType="java.lang.String" resultType="com.hwk.springboot.entity.Admin">
        select * from admin_m where username = #{username} and status != '-1'
    </select>
    <select id="getBySearchUsernameAndPassword" parameterType="java.lang.String" resultType="com.hwk.springboot.entity.Admin">
        select * from admin_m where username = #{username} and password = #{password}
    </select>
    <select id="getBySearchId" parameterType="java.lang.Integer" resultType="com.hwk.springboot.entity.Admin">
        select * from admin_m where id = #{id}
    </select>
    <select id="getUnAccept" resultType="com.hwk.springboot.entity.Admin">
        select * from admin_m
        <where>
            role != 'admin'
            <if test="params != null and params.name != null and params.name != ''">
                and name like concat('%',#{params.name},'%')
            </if>
            <if test="params != null and params.username != null and params.username != ''">
                and username like concat('%',#{params.username},'%')
            </if>
            and status != '1'
        </where>
        order by id asc
    </select>
    <select id="getBySearchIdList" resultType="com.hwk.springboot.entity.Admin" parameterType="java.lang.Integer">
        <choose>
            <when test="params != null and params.idlist != null and params.idlist.size > 0">
                select * from admin_m
                <where>
                    status = '1'
                    and id in
                    <foreach item="id" collection="params.idlist" open="(" close=")" separator=",">
                        #{id}
                    </foreach>
                </where>
            </when>
            <otherwise>
                select * from admin_m where 1=0
            </otherwise>
        </choose>
    </select>
    <!-- resultType æ˜¯ Map<Long,String>   -->
    <select id="getByRole" resultType="java.util.Map">
        SELECT count(*) as value ,role as name from admin_m
        where status = '1' and role != 'admin'
        GROUP BY role;
    </select>
</mapper>